begintemplate bNAC219_L4_DBC_d8f154e8e3
  public init
  public soma, dend, apic, axon
  public all, somatic, apical, axonal, basal, nSecSoma, nSecApical, nSecBasal, nSecAxonal, nSecAll, nSecAxonalOrig, SecSyn, distribute_channels
  public morphology
  objref SecSyn, this
  objref all, somatic, apical, axonal, basal
  strdef tstr

proc init() {
	all = new SectionList()
	somatic = new SectionList()
	basal = new SectionList()
	apical = new SectionList()
	axonal = new SectionList()
	forall delete_section()

    morphology()
    geom_nseg()
    biophys()
    forsec this.all {
        if(diam == 0){
          diam =  1
          printf("Error : Morphology problem with section [%s] 0 diam \n", secname())
        }
    }
    
}

create soma[1], dend[1], apic[1], axon[1]

/*!                                                                             
 * Iterate over the section and compute how many sqgments should be allocate to each.  This number
 * is influenced by the mechanisms distributed, so this function should be called after assigning biophys
 * @param $1 nseg length                                                        
 */                                                                             
proc geom_nseg_fixed() { local secIndex, chunkSize                              
    chunkSize = 40                                                              
    if( numarg() > 0 ) {                                                        
        chunkSize = $1                                                          
    }                                                                           
    soma area(.5) // make sure diam reflects 3d points                          
    secIndex=0                                                                  
    forsec all {                                                                
        nseg = 1 + 2*int(L/chunkSize)                                           
        secIndex = secIndex+1                                                   
    }                                                                           
}        

proc geom_nseg() {
    geom_nseg_fixed(40)
}

proc biophys() {localobj bp
	delete_axon()
	area(0.5)
	distance()
	access soma

  bp = new bNAC219_biophys()
  bp.biophys(this)
}

proc morphology() {localobj m
  m = new morphology_d8f154e8e3()
  m.morphology(this)
}


 /* Replace the axon built from the original morphology file with a stub axon.  If no args are given,
 * The stub axon will attempt to use diam info from original axon and L=30.  If args are present, the
 * axon diam is tapered according to the values given.  Also, axon[0].L = 20, axon[1].L = 30.
 *                                                                              
 * @param $1 Initial diameter for axon[0]                                       
 * @param $2 diameter at end of axon[0], start of axon[1]                       
 * @param $3 diameter at end of axon[1]                                         
 */                                                                             
proc delete_axon(){ local nSec, D1, D2, dist, i1, i2, count                     
                                                                                
    // preserve the number of original axonal sections                          
    nSec  = 0                                                                   
    forsec axonal{nSec = nSec + 1}                                              
                                                                                
    // Try to grab info from original axon                                      
    if(nSec == 0){ //No axon section present                                    
        //is this actually working?  Seems it would cause problems if we ever did have cells with 0 axon sections
        D1 = D2 = 1                                                             
    } else {                                                                    
        access axon[0]                                                          
        i1 = i2 = v(0.0001) // used when serializing sections prior to sim start
        D1 = D2 = diam                                                          
        if( nSec > 1 ){ //More than one axon section present                    
            access soma distance() //to calculate distance from soma            
            count = 0                                                           
            forsec axonal{   // loop through all axon sections and check for 60um distance
                if( count == 1 ){                                               
                    i2 = v(0.0001)                                              
                }                                                               
                count = count + 1                                               
                dist = distance(0.5)                                            
                if( dist > 60 ){ //if section is longer than 60um then store diam and exit from look
                    D2 = diam                                                   
                    break                                                       
                }                                                               
            }                                                                   
        }                                                                       
    }                                                                           
                                                                                
    // get rid of the old axon                                                  
    forsec axonal{delete_section()}                                             
    execute1("create axon[2]\n", this)                                          
                                                                                
    // new axon dependant on args passed (or lack thereof)                      
    access axon[0] {                                                            
        if( numarg() == 0 ) {                                                   
            L = 30                                                              
            diam = D1                                                           
            nseg = 1 + 2*int(L/40)                                              
        } else {                                                                
            L = 20                                                              
            nseg = 1+2*int(L/10)                                                
            diam(0:1) = $1:$2                                                   
        }                                                                       
        all.append()                                                            
        axonal.append()                                                         
        v(0.0001) = i1                                                          
    }                            
    access axon[1] {                                                            
        L = 30                                                                  
        if( numarg() == 0 ) {                                                   
            diam = D2                                                           
            nseg = 1 + 2*int(L/40)                                              
        } else {                                                                
            nseg = 1+2*int(L/10)                                                
            diam(0:1) = $2:$3                                                   
        }                                                                       
        all.append()                                                            
        axonal.append()                                                         
        v(0.0001) = i2                                                          
    }                                                                           
    nSecAxonal = 2                                                              
                                                                                                                                                            
    if( numarg() == 0 ) {                                                       
        soma[0] connect axon[0](0), 1                                           
        axon[0] connect axon[1](0), 1                                           
    } else {                                                                    
        connect axon(0), soma(0.5)                                              
        connect axon[1](0), axon[0](1)                                          
        access soma                                                             
    }                                                                           
}                 

public re_init_rng
objref rngList, rng
proc re_init_rng() {local channelID
    objref rng
    rngList = new List()
    channelID = 0

    forsec this.somatic {
        for (x, 0) {
            rng = new Random()
            rng.MCellRan4( channelID*10000+100, $1*10000+250+1 )
            channelID = channelID + 1
            rng.uniform(0,1)
            setdata_StochKv(x)
            setRNG_StochKv(rng)
            rngList.append(rng)
        }
    }

    forsec this.basal {
        for (x, 0) {
            rng = new Random()
            rng.MCellRan4( channelID*10000+100, $1*10000+250+1 )
            channelID = channelID + 1
            rng.uniform(0,1)
            setdata_StochKv(x)
            setRNG_StochKv(rng)
            rngList.append(rng)
        }
    }

    forsec this.apical {
        for (x, 0) {
            rng = new Random()
            rng.MCellRan4( channelID*10000+100, $1*10000+250+1 )
            channelID = channelID + 1
            rng.uniform(0,1)
            setdata_StochKv(x)
            setRNG_StochKv(rng)
            rngList.append(rng)
        }
    }
}


endtemplate bNAC219_L4_DBC_d8f154e8e3
